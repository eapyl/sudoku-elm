{"version":3,"sources":["service_worker.js"],"names":["CACHE","precacheFiles","fromCache","request","caches","open","then","cache","match","matching","status","Promise","reject","updateCache","response","put","self","addEventListener","event","console","log","skipWaiting","waitUntil","addAll","clients","claim","method","respondWith","fetch","clone","catch","error"],"mappings":";AAEA,IAAMA,EAAQ,kBACRC,EAAgB,CAAC,KAAM,kBAAmB,WAAY,gBA4D5D,SAASC,EAAUC,GAIVC,OAAAA,OAAOC,KAAKL,GAAOM,KAAK,SAASC,GAC/BA,OAAAA,EAAMC,MAAML,GAASG,KAAK,SAASG,GACpC,OAACA,GAAgC,MAApBA,EAASC,OAInBD,EAHEE,QAAQC,OAAO,gBAQ9B,SAASC,EAAYV,EAASW,GACrBV,OAAAA,OAAOC,KAAKL,GAAOM,KAAK,SAASC,GAC/BA,OAAAA,EAAMQ,IAAIZ,EAASW,KA3E9BE,KAAKC,iBAAiB,UAAW,SAASC,GACxCC,QAAQC,IAAI,0CAEZD,QAAQC,IAAI,yCACZJ,KAAKK,cAELH,EAAMI,UACJlB,OAAOC,KAAKL,GAAOM,KAAK,SAASC,GAExBA,OADPY,QAAQC,IAAI,8CACLb,EAAMgB,OAAOtB,QAM1Be,KAAKC,iBAAiB,WAAY,SAASC,GACzCC,QAAQC,IAAI,mDACZF,EAAMI,UAAUN,KAAKQ,QAAQC,WAI/BT,KAAKC,iBAAiB,QAAS,SAASC,GACT,QAAzBA,EAAMf,QAAQuB,QAElBR,EAAMS,YACJzB,EAAUgB,EAAMf,SAASG,KACvB,SAASQ,GAWAA,OANPI,EAAMI,UACJM,MAAMV,EAAMf,SAASG,KAAK,SAASQ,GAC1BD,OAAAA,EAAYK,EAAMf,QAASW,MAI/BA,GAET,WAESc,OAAAA,MAAMV,EAAMf,SAChBG,KAAK,SAASQ,GAINA,OAFPI,EAAMI,UAAUT,EAAYK,EAAMf,QAASW,EAASe,UAE7Cf,IAERgB,MAAM,SAASC,GACdZ,QAAQC,IACN,qDAAuDW","file":"service_worker.js","sourceRoot":"src","sourcesContent":["// This is the service worker with the Cache-first network\r\n\r\nconst CACHE = 'sudoku-precache';\r\nconst precacheFiles = ['./', './manifest.json', './elm.js', './index.html'];\r\n\r\nself.addEventListener('install', function(event) {\r\n  console.log('[PWA Builder] Install Event processing');\r\n\r\n  console.log('[PWA Builder] Skip waiting on install');\r\n  self.skipWaiting();\r\n\r\n  event.waitUntil(\r\n    caches.open(CACHE).then(function(cache) {\r\n      console.log('[PWA Builder] Caching pages during install');\r\n      return cache.addAll(precacheFiles);\r\n    })\r\n  );\r\n});\r\n\r\n// Allow sw to control of current page\r\nself.addEventListener('activate', function(event) {\r\n  console.log('[PWA Builder] Claiming clients for current page');\r\n  event.waitUntil(self.clients.claim());\r\n});\r\n\r\n// If any fetch fails, it will look for the request in the cache and serve it from there first\r\nself.addEventListener('fetch', function(event) {\r\n  if (event.request.method !== 'GET') return;\r\n\r\n  event.respondWith(\r\n    fromCache(event.request).then(\r\n      function(response) {\r\n        // The response was found in the cache so we responde with it and update the entry\r\n\r\n        // This is where we call the server to get the newest version of the\r\n        // file to use the next time we show view\r\n        event.waitUntil(\r\n          fetch(event.request).then(function(response) {\r\n            return updateCache(event.request, response);\r\n          })\r\n        );\r\n\r\n        return response;\r\n      },\r\n      function() {\r\n        // The response was not found in the cache so we look for it on the server\r\n        return fetch(event.request)\r\n          .then(function(response) {\r\n            // If request was success, add or update it in the cache\r\n            event.waitUntil(updateCache(event.request, response.clone()));\r\n\r\n            return response;\r\n          })\r\n          .catch(function(error) {\r\n            console.log(\r\n              '[PWA Builder] Network request failed and no cache.' + error\r\n            );\r\n          });\r\n      }\r\n    )\r\n  );\r\n});\r\n\r\nfunction fromCache(request) {\r\n  // Check to see if you have it in the cache\r\n  // Return response\r\n  // If not in the cache, then return\r\n  return caches.open(CACHE).then(function(cache) {\r\n    return cache.match(request).then(function(matching) {\r\n      if (!matching || matching.status === 404) {\r\n        return Promise.reject('no-match');\r\n      }\r\n\r\n      return matching;\r\n    });\r\n  });\r\n}\r\n\r\nfunction updateCache(request, response) {\r\n  return caches.open(CACHE).then(function(cache) {\r\n    return cache.put(request, response);\r\n  });\r\n}\r\n"]}